import { RouteJSON, LookupStoreTree, UrlBuilderContract, LookupStoreIdentifier } from '@ioc:Adonis/Core/Route';
import { EncryptionContract } from '@ioc:Adonis/Core/Encryption';
/**
 * Url builder is responsible for building the URLs
 */
export declare class UrlBuilder implements UrlBuilderContract {
    private encryption;
    private routes;
    /**
     * Params to be used for building the URL
     */
    private routeParams;
    /**
     * A custom query string to append to the URL
     */
    private queryString;
    /**
     * A baseUrl to prefix to the endpoint
     */
    private baseUrl;
    constructor(encryption: EncryptionContract, routes: LookupStoreIdentifier[]);
    /**
     * Processes the pattern against the params
     */
    private processPattern;
    /**
     * Finds the route inside the list of registered routes and
     * raises exception when unable to
     */
    private findRouteOrFail;
    /**
     * Suffix the query string to the URL
     */
    private suffixQueryString;
    /**
     * Prefix a custom url to the final URI
     */
    prefixUrl(url: string): this;
    /**
     * Append query string to the final URI
     */
    qs(queryString?: Record<string, any>): this;
    /**
     * Define required params to resolve the route
     */
    params(params?: any[] | Record<string, any>): this;
    /**
     * Generate url for the given route identifier
     */
    make(identifier: string): string;
    /**
     * Generate url for the given route identifier
     */
    makeSigned(identifier: string, options?: {
        expiresIn?: string | number;
        purpose?: string;
    }): string;
}
/**
 * The look up store to make URLs for a given route by looking
 * it by its name, route handler or the pattern directly.
 */
export declare class LookupStore {
    private encryption;
    /**
     * Shape of the registered routes. Optimized for lookups
     */
    tree: LookupStoreTree;
    constructor(encryption: EncryptionContract);
    /**
     * Register a route for lookups
     */
    register(route: RouteJSON): void;
    /**
     * Returns the route builder for the root domain
     */
    builder(): UrlBuilder;
    /**
     * Returns the route builder a given domain.
     */
    builderForDomain(domainPattern: string): UrlBuilder;
}
