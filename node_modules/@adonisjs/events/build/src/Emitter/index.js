"use strict";
/*
 * @adonisjs/events
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Emitter = void 0;
/// <reference path="../../adonis-typings/events.ts" />
const emittery_1 = __importDefault(require("emittery"));
const IocResolver_1 = require("../IocResolver");
/**
 * Emitter class exposes the API for async event emitter built on top of
 * Emittery. It also exposes an API to pre-define the Typescript types
 * for different events.
 */
class Emitter {
    constructor(app) {
        this.transport = new emittery_1.default();
        this.trappingEvents = false;
        this.traps = new Map();
        if (app) {
            this.iocResolver = new IocResolver_1.IocResolver(app);
        }
    }
    /**
     * Returns reference to the IoC resolver. Do not call this method until
     * handler is not a string
     */
    getResolver(handler) {
        if (!this.iocResolver) {
            throw new Error(`Cannot resolve string based event handler "${handler}". IoC container is not provided to the event emitter`);
        }
        return this.iocResolver;
    }
    /**
     * Define a custom error handler
     */
    onError(handler) {
        this.errorHandler = handler;
        return this;
    }
    /**
     * Define event handler for a given event
     */
    on(event, handler) {
        if (typeof handler === 'string') {
            handler = this.getResolver(handler).getEventHandler(event, handler);
        }
        this.transport.on(event, handler);
        return this;
    }
    /**
     * Define event handler for a given event and to be called
     * only once.
     */
    once(event, handler) {
        this.transport.once(event).then((data) => {
            if (typeof handler === 'string') {
                this.getResolver(handler).getEventHandler(event, handler)(data);
                this.getResolver(handler).removeEventHandler(event, handler);
            }
            else {
                handler(data);
            }
        });
        return this;
    }
    /**
     * Define catch all event handler to listen for all events.
     */
    onAny(handler) {
        if (typeof handler === 'string') {
            handler = this.getResolver(handler).getAnyHandler(handler);
        }
        this.transport.onAny(handler);
        return this;
    }
    /**
     * Emit event
     */
    async emit(event, data) {
        try {
            if (this.trappingEvents) {
                /**
                 * Give preference to the handler for a specific event
                 */
                if (this.traps.has(event)) {
                    return await this.traps.get(event)(data);
                }
                /**
                 * Invoke catch all (if defined)
                 */
                if (this.trapAllHandler) {
                    return await this.trapAllHandler(event, data);
                }
            }
            return await this.transport.emit(event, data);
        }
        catch (error) {
            if (this.errorHandler) {
                return this.errorHandler(event, error, data);
            }
            throw error;
        }
    }
    /**
     * Remove existing event listener
     */
    off(event, handler) {
        if (typeof handler === 'string') {
            const offHandler = this.getResolver(handler).removeEventHandler(event, handler);
            if (offHandler) {
                this.transport.off(event, offHandler);
            }
            return;
        }
        this.transport.off(event, handler);
    }
    /**
     * Remove existing event listener for catch all handler
     */
    offAny(handler) {
        if (typeof handler === 'string') {
            const offHandler = this.getResolver(handler).removeAnyHandler(handler);
            if (offHandler) {
                this.transport.offAny(offHandler);
            }
            return;
        }
        this.transport.offAny(handler);
    }
    /**
     * Remove existing event listener.
     * @alias off
     */
    clearListener(event, handler) {
        this.off(event, handler);
    }
    /**
     * Clear all listeners for a given event
     */
    clearListeners(event) {
        this.transport.clearListeners(event);
    }
    /**
     * Clear all listeners for all events
     */
    clearAllListeners() {
        this.transport.clearListeners();
    }
    /**
     * Returns count of listeners for a given event or all
     * events.
     */
    listenerCount(event) {
        return this.transport.listenerCount(event ? event : undefined);
    }
    /**
     * Returns a boolean telling if listeners count for a given
     * event or all events is greater than 0 or not.
     */
    hasListeners(event) {
        return this.listenerCount(event) > 0;
    }
    /**
     * Define custom namespace for event listeners. It is set to `App/Listeners`
     * by default.
     */
    namespace(namespace) {
        if (this.iocResolver) {
            this.iocResolver.namespace(namespace);
        }
        return this;
    }
    /**
     * Trap event instead of emitting it
     */
    trap(event, handler) {
        this.trappingEvents = true;
        this.traps.set(event, handler);
        return this;
    }
    /**
     * Trap all events instead of emitting them
     */
    trapAll(handler) {
        this.trappingEvents = true;
        this.trapAllHandler = handler;
        return this;
    }
    /**
     * Restore trap
     */
    restore() {
        this.trappingEvents = false;
        this.traps.clear();
        this.trapAllHandler = undefined;
        return this;
    }
}
exports.Emitter = Emitter;
